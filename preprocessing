#!/usr/bin/env bash
#
# Adapted from https://github.com/facebookresearch/MIXER/blob/master/prepareData.sh

echo 'Cloning Moses github repository (for tokenization scripts)...'
git clone https://github.com/moses-smt/mosesdecoder.git

echo 'Cloning Subword NMT repository (for BPE pre-processing)...'
git clone https://github.com/rsennrich/subword-nmt.git

SCRIPTS=mosesdecoder/scripts    #points to the tokeniser script
TOKENIZER=$SCRIPTS/tokenizer/tokenizer.perl   #points to tokeniser executable perl file
LC=$SCRIPTS/tokenizer/lowercase.perl  #points to lowercase tokeniser script
CLEAN=$SCRIPTS/training/clean-corpus-n.perl   #points to cleaning script
BPEROOT=subword-nmt/subword_nmt   #points to byte pair encoding script
BPE_TOKENS=10000    #sets how many bpe tokens allowed

#url for the corpus files
URL="https://wit3.fbk.eu/archive/2014-01/texts/de/en/de-en.tgz"
GZ=de-en.tgz

if [ ! -d "$SCRIPTS" ]; then
    echo "Please set SCRIPTS variable correctly to point to Moses scripts."
    exit
fi

src=de  #source language german
tgt=en  #target language english
lang=de-en #lang = german-english
prep=iwslt14.tokenized.de-en #sets prep to that directory
tmp=$prep/tmp #sets tmp to iwslt14.tokenized.de-en/tmp (new folder)
orig=orig

mkdir -p $orig $tmp $prep #makes directory orig/iwslt14.tokenized.de-en/tmp/iwslt14.tokenized.de-en

echo "Downloading data from ${URL}..."
cd $orig
wget "$URL" #downloads the corpus

if [ -f $GZ ]; then #prints whether the data has been successfully download
    echo "Data successfully downloaded."
else
    echo "Data not successfully downloaded."
    exit
fi

tar zxvf $GZ #extracts the downloaded files
cd ..

echo "pre-processing train data..."
for l in $src $tgt; do  #for l in de, en
    f=train.tags.$lang.$l #f = train.tags.de-en.de (and f=train.tags.de-en.en)
    tok=train.tags.$lang.tok.$l #tok=train.tags.de-en.tok.de(-and- en)

    cat $orig/$lang/$f | \  #opens orig/de-en/train.tags.de-en.de(en)
    grep -v '<url>' | \ #I haven't a clue what this does lol
    grep -v '<talkid>' | \
    grep -v '<keywords>' | \
    sed -e 's/<title>//g' | \ #replaces any occurence of '<title>' with an empty space. Repeat for the other seds
    sed -e 's/<\/title>//g' | \
    sed -e 's/<description>//g' | \
    sed -e 's/<\/description>//g' | \
    perl $TOKENIZER -threads 8 -l $l > $tmp/$tok #tokenises 
    echo ""
done
perl $CLEAN -ratio 1.5 $tmp/train.tags.$lang.tok $src $tgt $tmp/train.tags.$lang.clean 1 175
for l in $src $tgt; do
    perl $LC < $tmp/train.tags.$lang.clean.$l > $tmp/train.tags.$lang.$l
done

echo "pre-processing valid/test data..."
for l in $src $tgt; do
    for o in `ls $orig/$lang/IWSLT14.TED*.$l.xml`; do
    fname=${o##*/}
    f=$tmp/${fname%.*}
    echo $o $f
    grep '<seg id' $o | \
        sed -e 's/<seg id="[0-9]*">\s*//g' | \
        sed -e 's/\s*<\/seg>\s*//g' | \
        sed -e "s/\â€™/\'/g" | \
    perl $TOKENIZER -threads 8 -l $l | \
    perl $LC > $f
    echo ""
    done
done


echo "creating train, valid, test..."
for l in $src $tgt; do
    awk '{if (NR%23 == 0)  print $0; }' $tmp/train.tags.de-en.$l > $tmp/valid.$l #creates a validation file of each language
    awk '{if (NR%23 != 0)  print $0; }' $tmp/train.tags.de-en.$l > $tmp/train.$l #creates a training file of each language

    cat $tmp/IWSLT14.TED.dev2010.de-en.$l \ #opens the folowing files
        $tmp/IWSLT14.TEDX.dev2012.de-en.$l \
        $tmp/IWSLT14.TED.tst2010.de-en.$l \
        $tmp/IWSLT14.TED.tst2011.de-en.$l \
        $tmp/IWSLT14.TED.tst2012.de-en.$l \
        > $tmp/test.$l #and sets them all to test.de (and test.en)
done

TRAIN=$tmp/train.en-de #directory to 
BPE_CODE=$prep/code #directory to bpe_encodings for corpus
rm -f $TRAIN #deletes the file directed in the TRAIN variable
for l in $src $tgt; do
    cat $tmp/train.$l >> $TRAIN #puts the separate train.de and train.en filed to the Train Variable
done

echo "learn_bpe.py on ${TRAIN}..."
python $BPEROOT/learn_bpe.py -s $BPE_TOKENS < $TRAIN > $BPE_CODE #learns Byte Pair Encodings

for L in $src $tgt; do
    for f in train.$L valid.$L test.$L; do
        echo "apply_bpe.py to ${f}..."
        python $BPEROOT/apply_bpe.py -c $BPE_CODE < $tmp/$f > $prep/$f #applies byte pair encodings to each file (train.x, valid.x, test.x, where x is the language code)
    done
done
